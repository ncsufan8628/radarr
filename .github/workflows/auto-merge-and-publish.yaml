name: Sync, Build, and Release Radarr

on:
  schedule:
    - cron: '0 3 * * *' # Runs daily at 3 AM UTC
  workflow_dispatch: # Allows manual trigger

jobs:
  sync_and_build:
    runs-on: ubuntu-latest

    steps:
      - name: Debug Token Availability
        run: |
          if [ -z "${{ secrets.PA_TOKEN }}" ]; then
            echo "❌ PA_TOKEN is NOT set!"
            exit 1
          else
            echo "✅ PA_TOKEN is set!"
          fi

      - name: Checkout Your Fork
        uses: actions/checkout@v4
        with:
          repository: ncsufan8628/radarr
          token: ${{ secrets.PA_TOKEN }}
          fetch-depth: 0

      - name: Set Git Identity
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Add Radarr Upstream and Sync
        run: |
          git remote add upstream https://x-access-token:${{ secrets.PA_TOKEN }}@github.com/Radarr/Radarr.git
          git fetch upstream
          git checkout -B master origin/master
          git merge --ff-only upstream/master || echo "⚠️ Merge conflicts detected, manual fix required!"
          git push origin master
        env:
          GITHUB_TOKEN: ${{ secrets.PA_TOKEN }}

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y dotnet-sdk-8.0 jq

      - name: Debug Radarr Build Script
        run: |
          echo "🔍 Checking build script..."
          if [ -f build.sh ]; then
            chmod +x build.sh
            ./build.sh --help || echo "⚠️ build.sh --help failed!"
          else
            echo "❌ build.sh not found!"
            exit 1
          fi

      - name: Build Radarr
        run: |
          git submodule update --init --recursive
          ./build.sh --target=linux-musl-x64 | tee build_output.log
          echo "🔍 Checking build output..."
          ls -lR ./bin || echo "❌ No bin directory found!"

      - name: Verify Build Output
        run: |
          OUTPUT_DIR=$(find ./bin -type d -name "publish" | head -n 1)
          if [ -z "$OUTPUT_DIR" ]; then
            echo "❌ No publish directory found!"
            exit 1
          fi
          echo "✅ Found output at: $OUTPUT_DIR"
          echo "OUTPUT_PATH=$OUTPUT_DIR" >> $GITHUB_ENV

      - name: Create GitHub Release
        if: success()
        uses: softprops/action-gh-release@v2
        with:
          tag_name: latest
          name: Radarr Build - Latest
          body: "🚀 Auto-built Radarr with the latest updates."
          draft: false
          prerelease: false
          files: ${{ env.OUTPUT_PATH }}/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}